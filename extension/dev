#!/usr/bin/env node

// @ts-check

// This script can be used to list available Apple simulators and install
// builds on them.

/**
 * @typedef {{
 *   udid: string;
 *   deviceIdentifier: string;
 *   state: string;
 *   name: string;
 * }} Simulator
 */
/**
 * @typedef {{
 *   identifier: string;
 *   name: string;
 *   deviceType: string;
 * }} Device
 */

import { Command, Argument } from "@commander-js/extra-typings";
import dedent from "dedent";
import { spawn } from "node:child_process";
import { writeFileSync, readFileSync, createWriteStream } from "node:fs";
import { moveCursor } from "node:readline";

const program = new Command();

const platforms = /** @type {const} */ (["sim", "iOS", "macOS"]);
/** @typedef {platforms[number]} Platform */

const versionParts = /** @type {const} */ ([
	"major",
	"minor",
	"patch",
	"build",
]);
/** @typedef {versionParts[number]} VersionPart */

/** @type {Record<Exclude<Platform, 'sim'>, string>} */
const exportExts = {
	iOS: "ipa",
	macOS: "pkg",
};

/** @type {Record<Exclude<Platform, 'sim'>, string>} */
const exportTypes = {
	iOS: "ios",
	macOS: "macos",
};

const buildDir = ".build";

program
	.name("dev")
	.description("Dev tools")
	.configureHelp({ sortSubcommands: true })
	.showHelpAfterError()
	.version("1.0.0");

program
	.command("build")
	.description("Build the extension")
	.addArgument(
		new Argument("<platform>", "Platform to build for").choices(platforms),
	)
	.action(async (platform) => {
		loadEnv("prod");

		if (platform === "sim") {
			await buildSimApp();
		} else {
			await buildApp(platform);
		}
	});

program
	.command("list")
	.description("List active devices or simulators")
	.addArgument(
		new Argument("<platform>", "Platform to build for").choices(platforms),
	)
	.action(async (platform) => {
		if (platform === "sim") {
			const sims = await getSimulators();
			for (const sim of sims) {
				console.log(`${sim.udid}: ${sim.name}`);
			}
		} else {
			const devs = await getDevices();
			for (const dev of devs) {
				console.log(`${dev.identifier}: ${dev.name}`);
			}
		}
	});

program
	.command("install")
	.description("Install a build on a device or simulator")
	.argument("<app>", "Path to app bundle")
	.argument("[id]", "Device or simulator ID to install to")
	.action(async (app, id) => {
		if (app.endsWith(".app")) {
			const udid = id
				? await getMatchingSimId(id)
				: (await getSimulators())[0].udid;
			print(`ðŸ”¨ Installing ${app} on device ${udid}...\n`);
			await run("xcrun", ["simctl", "install", udid, app], {
				inheritStdio: true,
			});
			print("ðŸš€ Done!\n");
		} else {
			const identifier = id
				? await getMatchingDeviceId(id)
				: (await getDevices())[0].identifier;
			print(`ðŸ”¨ Installing ${app} on device ${identifier}...\n`);
			await run("xcrun", [
				"devicectl",
				"device",
				"install",
				"app",
				"--device",
				identifier,
				app,
			]);
			print("ðŸš€ Done!\n");
		}
	});

program
	.command("upload")
	.description("Upload a build to the app store")
	.argument("<app>", "Path to app bundle")
	.action(async (app) => {
		await uploadApp(app);
	});

program
	.command("version")
	.description("Show or update the current project version")
	.addArgument(new Argument("[part]", "Part to bump").choices(versionParts))
	.action(async (part) => {
		getSetVersion(part);
	});

process.on("SIGINT", () => {
	showCursor();
	process.exit();
});

try {
	await program.parseAsync();
} catch (error) {
	console.error("Error:", error);
}

/**
 * @return {Promise<Simulator[]>}
 */
async function getSimulators() {
	const { output } = await run("xcrun", ["simctl", "list", "--json"]);

	/** @type {{ devices: { [runtime: string]: Simulator[] } }} */
	const simInfo = JSON.parse(output.trim());

	/** @type {Simulator[]} */
	const sims = [];

	for (const sim of Object.values(simInfo.devices)) {
		for (const dev of sim) {
			if (dev.state === "Booted") {
				sims.push(dev);
			}
		}
	}

	return sims;
}

/**
 * @return {Promise<Device[]>}
 */
async function getDevices() {
	await run("xcrun", [
		"devicectl",
		"list",
		"devices",
		"--json-output",
		".devctl.json",
		"-q",
	]);

	/**
	 * @type {{
	 *   result: {
	 *     devices: {
	 *       identifier: string;
	 *       connectionProperties: {
	 *				 pairingState: string;
	 *				 tunnelState: string;
	 *       };
	 *       deviceProperties: {
	 *         name: string;
	 *       };
	 *       hardwareProperties: {
	 *         deviceType: string;
	 *       };
	 *     }[]
	 *   }
	 * }}
	 */
	const deviceInfo = JSON.parse(
		readFileSync(".devctl.json", { encoding: "utf8" }),
	);
	await run("rm", [".devctl.json"]);

	/** @type {Device[]} */
	const devices = [];

	for (const device of deviceInfo.result.devices) {
		if (
			device.connectionProperties.pairingState === "paired" &&
			device.connectionProperties.tunnelState !== "unavailable"
		) {
			devices.push({
				identifier: device.identifier,
				name: device.deviceProperties.name,
				deviceType: device.hardwareProperties.deviceType,
			});
		}
	}

	return devices;
}

/**
 * @param {string} partialUdid
 */
async function getMatchingSimId(partialUdid) {
	const sims = await getSimulators();

	let udid;
	partialUdid = partialUdid.toUpperCase();

	const sim = sims.find((s) => s.udid.startsWith(partialUdid));
	if (sim) {
		return sim.udid;
	}

	throw new Error(`Invalid partial device ID "${udid}"`);
}

/**
 * @param {string} partialIdentifier
 */
async function getMatchingDeviceId(partialIdentifier) {
	const devs = await getDevices();

	let identifier;
	partialIdentifier = partialIdentifier.toUpperCase();

	const dev = devs.find((d) => d.identifier.startsWith(partialIdentifier));
	if (dev) {
		return dev.identifier;
	}

	throw new Error(`Invalid partial device ID "${identifier}"`);
}

/**
 * @param {string} cmd
 * @param {string[]} args
 * @param {{logFile?: string, inheritStdio?: boolean }} [opts]
 *
 * @return {Promise<{
 *   output: string,
 *   status: number | null,
 * }>}
 */
async function run(cmd, args, opts) {
	return new Promise((resolve, reject) => {
		const proc = spawn(cmd, args, {
			stdio: opts?.inheritStdio ? "inherit" : "pipe",
		});
		let output = "";

		if (opts?.logFile) {
			const logstream = createWriteStream(opts.logFile);
			proc.stdout?.pipe(logstream);
			proc.stderr?.pipe(logstream);
		} else if (!opts?.inheritStdio) {
			proc.stdout?.setEncoding("utf8");
			proc.stderr?.setEncoding("utf8");
			proc.stdout?.on("data", (chunk) => (output += chunk));
			proc.stderr?.on("data", (chunk) => (output += chunk));
		}

		proc.on("exit", (status) => {
			if (status !== 0) {
				const error = new Error(`command '${cmd}' failed`);
				reject({ error, output });
			} else {
				resolve({
					output,
					status,
				});
			}
		});
	});
}

function hideCursor() {
	process.stdout.write("\u001B[?25l");
}

function showCursor() {
	process.stdout.write("\u001B[?25h");
}

/**
 * @template T
 * @param {() => Promise<T>} callback
 * @return Promise<T>
 */
async function spin(callback) {
	const out = process.stdout;
	const spinners = ["-", "\\", "|", "/"];
	let index = 0;

	hideCursor();

	const interval = setInterval(() => {
		let line = spinners[index];
		out.write(line);
		moveCursor(out, -1, 0);
		index = (index + 1) % spinners.length;
	}, 90);

	try {
		return await callback();
	} finally {
		clearInterval(interval);
		out.write(" ");
		showCursor();
	}
}

/**
 * @param {string} str
 */
function print(str) {
	process.stdout.write(str);
}

/**
 * @param {'dev' | 'prod'} envName
 * @return {Record<string, string>}
 */
function loadEnv(envName) {
	const env = JSON.parse(
		readFileSync(`env.${envName}.json`, { encoding: "utf8" }),
	);
	for (const key of Object.keys(env)) {
		process.env[key] = env[key];
	}

	const xcconfig = [];
	for (const key of Object.keys(env)) {
		xcconfig.push(`${key}=${env[key]}`);
	}

	writeFileSync("env.xcconfig", xcconfig.join("\n"));

	return env;
}

/**
 * @param {VersionPart} [part]
 */
function getSetVersion(part) {
	const projectFile = "SpellingBeePlus.xcodeproj/project.pbxproj";
	const projectLines = readFileSync(projectFile, {
		encoding: "utf8",
	}).split("\n");

	const buildLineIndex = projectLines.findIndex((line) =>
		/\s+CURRENT_PROJECT_VERSION = \d+/.test(line),
	);
	if (buildLineIndex === -1) {
		throw new Error("missing build number line");
	}
	const buildLine = projectLines[buildLineIndex];
	let build = Number(buildLine.split(" = ")[1].trim().replace(/;$/, ""));

	const versionLineIndex = projectLines.findIndex((line) =>
		/\s+MARKETING_VERSION = \d+\.\d+\.\d+/.test(line),
	);
	if (versionLineIndex === -1) {
		throw new Error("missing version line");
	}
	const versionLine = projectLines[versionLineIndex];
	let version = versionLine.split(" = ")[1].trim().replace(/;$/, "");

	if (!part) {
		print(`${version}(${build})\n`);
	} else {
		let [major, minor, patch] = version.split(".").map(Number);

		build += 1;

		switch (part) {
			case "major":
				major += 1;
				minor = 0;
				patch = 0;
				break;
			case "minor":
				minor += 1;
				patch = 0;
				break;
			case "patch":
				patch += 1;
		}

		const buildLineParts = buildLine.split(" = ");
		projectLines[buildLineIndex] = `${buildLineParts[0]} = ${build};`;

		const versionLineParts = versionLine.split(" = ");
		projectLines[versionLineIndex] =
			`${versionLineParts[0]} = ${major}.${minor}.${patch};`;

		writeFileSync(projectFile, projectLines.join("\n"));
	}
}

async function buildSimApp() {
	loadEnv("dev");

	print("ðŸ”¨ Building...");

	try {
		await run("mkdir", ["-p", buildDir]);
		await spin(() =>
			run(
				"xcodebuild",
				[
					"-project",
					"SpellingBeePlus.xcodeproj",
					"-scheme",
					"SpellingBeePlus (iOS)",
					"-configuration",
					"Debug",
					"-sdk",
					"iphonesimulator",
					"-destination",
					"generic/platform=iOS Simulator",
					"-derivedDataPath",
					buildDir,
					"clean",
					"build",
				],
				{
					logFile: `${buildDir}/build.log`,
				},
			),
		);

		run("mv", [
			`${buildDir}/Build/Products/Debug-iphonesimulator/SpellingBeePlus.app`,
			`build-${Date.now()}.app`,
		]);

		run("rm", ["-rf", buildDir]);
	} catch (error) {
		print(`ðŸš¨ Build failed -- see logs in ${buildDir}\n`);
	}

	print("ðŸš€ Done!\n");
}

/**
 * @param {Exclude<Platform, 'sim'>} platform
 */
async function buildApp(platform) {
	const archive = `${buildDir}/SpellingBeePlus.xcarchive`;
	const exportPath = `${buildDir}/export`;
	const exportOptionsFile = `${buildDir}/exportOptions.plist`;
	const exportPlists = {
		iOS: dedent`
			<?xml version=\"1.0\" encoding=\"UTF-8\"?>
			<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">
			<plist version=\"1.0\">
				<dict>
					<key>method</key>
					<string>release-testing</string>

					<key>teamID</key>
					<string>${getEnv("DEV_TEAM")}</string>
				</dict>
			</plist>
		`,
		macOS: dedent`
			<?xml version=\"1.0\" encoding=\"UTF-8\"?>
			<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">
			<plist version=\"1.0\">
				<dict>
					<key>method</key>
					<string>app-store-connect</string>

					<key>testFlightInternalTestingOnly</key>
					<true/>

					<key>teamID</key>
					<string>${getEnv("DEV_TEAM")}</string>
				</dict>
			</plist>
		`,
	};

	print(`ðŸ”¨ Building ${platform} app...`);

	try {
		await run("mkdir", ["-p", buildDir]);
		await spin(() =>
			run("xcodebuild", [
				`DEV_TEAM=${getEnv("DEV_TEAM")}`,
				"-scheme",
				`SpellingBeePlus (${platform})`,
				"-destination",
				`generic/platform=${platform}`,
				"-archivePath",
				`${buildDir}/SpellingBeePlus.xcarchive`,
				"archive",
			]),
		);

		print("\n");
		writeFileSync(exportOptionsFile, exportPlists[platform]);
		print(`ðŸ“¦ Exporting ${platform} app...`);

		const ext = exportExts[platform];

		await spin(() =>
			run(
				"xcodebuild",
				[
					`DEV_TEAM=${getEnv("DEV_TEAM")}`,
					"-exportArchive",
					"-allowProvisioningUpdates",
					"-archivePath",
					archive,
					"-exportPath",
					exportPath,
					"-exportOptionsPlist",
					exportOptionsFile,
				],
				{ logFile: `${buildDir}/archive.log` },
			),
		);

		run("mv", [
			`${exportPath}/SpellingBeePlus.${ext}`,
			`build-${Date.now()}.${ext}`,
		]);

		run("rm", ["-rf", buildDir]);
	} catch {
		print(`ðŸš¨ Build failed -- see logs in ${buildDir}\n`);
	}
}

/**
 * @param {string} app
 * @param {{ validate?: boolean }} [options]
 */
async function uploadApp(app, options) {
	const ext = app.split(".").pop();
	/** @type {Platform} */
	const platform = ext === "pkg" ? "macOS" : "iOS";

	const { output } = await run("op", ["read", getEnv("DEV_PASSWORD")]);
	const devPassword = output.trim();

	print(`>>> Uploading ${app}...`);

	await spin(() =>
		run(
			"xcrun",
			[
				"altool",
				options?.validate ? "--validate-app" : "--upload-app",
				"--file",
				app,
				"--username",
				getEnv("DEV_USERNAME"),
				"--password",
				devPassword,
				"--type",
				exportTypes[platform],
			],
			{ logFile: `${buildDir}/upload.log` },
		),
	);
}

/**
 * @param {string} name
 * @return {string}
 */
function getEnv(name) {
	const val = process.env[name];
	if (val === undefined) {
		throw new Error(`${name} must be defined`);
	}
	return val;
}
