#!/usr/bin/env node

// @ts-check

// This script can be used to list available Apple simulators and install
// builds on them.

/**
 * @typedef {{
 *   availabilityError?: string;
 *   dataPath: string;
 *   dataPathSize: number;
 *   logPath: string;
 *   udid: string;
 *   isAvailable: boolean;
 *   deviceIdentifier: string;
 *   state: string;
 *   name: string;
 * }} Device
 */
/** @typedef {{ devices: { [runtime: string]: Device[] } }} Simulators */

import { Command, Option, Argument } from "@commander-js/extra-typings";
import dedent from "dedent";
import { spawn } from "node:child_process";
import { writeFileSync, readFileSync, createWriteStream } from "node:fs";
import { moveCursor } from "node:readline";

const program = new Command();

const platforms = /** @type {const} */ (["iOS", "macOS"]);
/** @typedef {platforms[number]} Platform */

const versionParts = /** @type {const} */ ([
	"major",
	"minor",
	"patch",
	"build",
]);
/** @typedef {versionParts[number]} VersionPart */

/** @type {Record<Platform, string>} */
const exportExts = {
	iOS: "ipa",
	macOS: "pkg",
};

/** @type {Record<Platform, string>} */
const exportTypes = {
	iOS: "ios",
	macOS: "macos",
};

program
	.name("dev")
	.description("Dev tools")
	.configureHelp({ sortSubcommands: true })
	.showHelpAfterError()
	.version("1.0.0");

const simCmd = program.command("sim").description("Work with simulators");

simCmd
	.command("build")
	.description("Build the extension for the simulator")
	.action(async () => {
		loadEnv("dev");

		print(">>> Building...");

		await spin(() =>
			run(
				"xcodebuild",
				[
					"-project",
					"SpellingBeePlus.xcodeproj",
					"-scheme",
					"SpellingBeePlus (iOS)",
					"-configuration",
					"Debug",
					"-sdk",
					"iphonesimulator",
					"-destination",
					"generic/platform=iOS Simulator",
					"-derivedDataPath",
					`build/iOS`,
					"clean",
					"build",
				],
				{
					logFile: "build/iOS-sim.log",
				},
			),
		);

		print(">>> Done!\n");
	});

simCmd
	.command("list")
	.description("List available simulators")
	.action(async () => {
		const sims = await getSimulators();
		const runtimes = getAvailableRuntimes(sims);

		for (const runtime of runtimes) {
			const indent = runtimes.length > 1 ? "  " : "";

			if (runtimes.length > 1) {
				console.log(runtime);
			}

			for (const dev of sims.devices[runtime]) {
				console.log(`${indent}${dev.udid}: ${dev.name}`);
			}
		}
	});

simCmd
	.command("install")
	.argument("<app>", "Path to app")
	.argument("<udid>", "Device ID")
	.description("Install an app in a simulator")
	.action(async (app, udid) => {
		const fullUdid = await getMatchingUdid(udid);
		print(`Installing ${app} on device ${fullUdid}...\n`);
		await run("xcrun", ["simctl", "install", fullUdid, app]);
		print("Done!\n");
	});

simCmd
	.command("start")
	.argument("<udid>", "Device ID")
	.description("Start a simulator")
	.action(async (udid) => {
		const fullUdid = await getMatchingUdid(udid);
		await run("xcrun", ["simctl", "boot", fullUdid]);
	});

program
	.command("publish")
	.description("Publish the app to the App Store")
	.addOption(
		new Option(
			"-p, --platform <platform>",
			"Platform to build for",
		).choices(platforms),
	)
	.option("-c, --check", "Check (build and validate only)")
	.action(async (options) => {
		const env = loadEnv("prod");

		const doBuild = new Set(platforms);
		let doPublish = true;
		let doTag = true;
		let doCheck = true;

		if (options.platform === "iOS") {
			doBuild.delete("macOS");
		} else if (options.platform === "macOS") {
			doBuild.delete("iOS");
		}

		if (options.check) {
			doPublish = false;
			doTag = false;
		}

		if (doCheck) {
			try {
				await run("git", ["diff-index", "--quiet", "HEAD"]);
			} catch {
				console.log("Project has uncommitted changes");
				process.exit(1);
			}
		}

		const version = getSetVersion();

		print(`>>> Building ${version}\n`);
		print(">>> Clearing build directory...\n");

		await run("rm", ["-rf", "./build"]);

		for (const platform of doBuild) {
			await buildApp(platform, env);
			await exportApp(platform, env);
			if (doPublish) {
				await uploadApp(platform, env);
			} else {
				await validateApp(platform, env);
			}
		}
	});

program
	.command("version")
	.description("Show or update the current project version")
	.addArgument(new Argument("[part]", "Part to bump").choices(versionParts))
	.action(async (part) => {
		getSetVersion(part);
	});

process.on("SIGINT", () => {
	showCursor();
	process.exit();
});

try {
	await program.parseAsync();
} catch (error) {
	console.error(`Error: ${error}`);
}

/**
 * @return {Promise<Simulators>}
 */
async function getSimulators() {
	const { output } = await run("xcrun", ["simctl", "list", "--json"]);

	/** @type {{ devices: { [runtime: string]: Device[] } }} */
	return JSON.parse(output.trim());
}

/**
 * @param {Simulators} simulators
 * @return {string[]}
 */
function getAvailableRuntimes(simulators) {
	const runtimes = Object.keys(simulators.devices).sort();
	const availableIosRuntimes = runtimes
		.filter((runtime) => runtime.includes("iOS"))
		.filter((runtime) =>
			simulators.devices[runtime].some((device) => device.isAvailable),
		);

	return availableIosRuntimes;
}

/**
 * @param {string} partialUdid
 */
async function getMatchingUdid(partialUdid) {
	const sims = await getSimulators();

	let udid;
	partialUdid = partialUdid.toUpperCase();

	for (const runtime of Object.keys(sims.devices)) {
		const dev = sims.devices[runtime].find((dev) =>
			dev.udid.startsWith(partialUdid),
		);
		if (dev) {
			return dev.udid;
		}
	}

	throw new Error(`Invalid partial device ID "${udid}"`);
}

/**
 * @param {string} cmd
 * @param {string[]} args
 * @param {{logFile?: string, inheritStdio?: boolean }} [opts]
 *
 * @return {Promise<{
 *   output: string,
 *   status: number | null,
 * }>}
 */
async function run(cmd, args, opts) {
	return new Promise((resolve, reject) => {
		const proc = spawn(cmd, args, {
			stdio: opts?.inheritStdio ? "inherit" : "pipe",
		});
		let output = "";

		if (opts?.logFile) {
			const logstream = createWriteStream(opts.logFile);
			proc.stdout?.pipe(logstream);
			proc.stderr?.pipe(logstream);
		} else if (!opts?.inheritStdio) {
			proc.stdout?.setEncoding("utf8");
			proc.stderr?.setEncoding("utf8");
			proc.stdout?.on("data", (chunk) => (output += chunk));
			proc.stderr?.on("data", (chunk) => (output += chunk));
		}

		proc.on("exit", (status) => {
			if (status !== 0) {
				const error = new Error(`command '${cmd}' failed`);
				reject({ error, output });
			} else {
				resolve({
					output,
					status,
				});
			}
		});
	});
}

function hideCursor() {
	process.stdout.write("\u001B[?25l");
}

function showCursor() {
	process.stdout.write("\u001B[?25h");
}

/**
 * @template T
 * @param {() => Promise<T>} callback
 * @return Promise<T>
 */
async function spin(callback) {
	const out = process.stdout;
	const spinners = ["-", "\\", "|", "/"];
	let index = 0;

	hideCursor();

	const interval = setInterval(() => {
		let line = spinners[index];
		out.write(line);
		moveCursor(out, -1, 0);
		index = (index + 1) % spinners.length;
	}, 90);

	try {
		return await callback();
	} finally {
		clearInterval(interval);
		out.write(" ");
		showCursor();
	}
}

/**
 * @param {string} str
 */
function print(str) {
	process.stdout.write(str);
}

/**
 * @param {'dev' | 'prod'} envName
 * @return {Record<string, string>}
 */
function loadEnv(envName) {
	const env = JSON.parse(
		readFileSync(`env.${envName}.json`, { encoding: "utf8" }),
	);
	for (const key of Object.keys(env)) {
		process.env[key] = env[key];
	}

	const xcconfig = [];
	for (const key of Object.keys(env)) {
		xcconfig.push(`${key}=${env[key]}`);
	}

	writeFileSync("env.xcconfig", xcconfig.join("\n"));

	return env;
}

/**
 * @param {VersionPart} [part]
 */
function getSetVersion(part) {
	const projectFile = "SpellingBeePlus.xcodeproj/project.pbxproj";
	const projectLines = readFileSync(projectFile, {
		encoding: "utf8",
	}).split("\n");

	const buildLineIndex = projectLines.findIndex((line) =>
		/\s+CURRENT_PROJECT_VERSION = \d+/.test(line),
	);
	if (buildLineIndex === -1) {
		throw new Error("missing build number line");
	}
	const buildLine = projectLines[buildLineIndex];
	let build = Number(buildLine.split(" = ")[1].trim().replace(/;$/, ""));

	const versionLineIndex = projectLines.findIndex((line) =>
		/\s+MARKETING_VERSION = \d+\.\d+\.\d+/.test(line),
	);
	if (versionLineIndex === -1) {
		throw new Error("missing version line");
	}
	const versionLine = projectLines[versionLineIndex];
	let version = versionLine.split(" = ")[1].trim().replace(/;$/, "");

	if (!part) {
		print(`${version}(${build})\n`);
	} else {
		let [major, minor, patch] = version.split(".").map(Number);

		build += 1;

		switch (part) {
			case "major":
				major += 1;
				minor = 0;
				patch = 0;
				break;
			case "minor":
				minor += 1;
				patch = 0;
				break;
			case "patch":
				patch += 1;
		}

		const buildLineParts = buildLine.split(" = ");
		projectLines[buildLineIndex] = `${buildLineParts[0]} = ${build};`;

		const versionLineParts = versionLine.split(" = ");
		projectLines[versionLineIndex] =
			`${versionLineParts[0]} = ${major}.${minor}.${patch};`;

		writeFileSync(projectFile, projectLines.join("\n"));
	}
}

/**
 * @param {Platform} platform
 * @param {Record<string, string>} env
 */
async function buildApp(platform, env) {
	const buildDir = `build/${platform}`;

	await run("mkdir", ["-p", buildDir]);

	print(`>>> Building ${platform} app...`);

	await spin(() =>
		run("xcodebuild", [
			`DEV_TEAM=${env.DEV_TEAM}`,
			"-scheme",
			`SpellingBeePlus (${platform})`,
			"-destination",
			`generic/platform=${platform}`,
			"-archivePath",
			`${buildDir}/SpellingBeePlus.xcarchive`,
			"archive",
		]),
	);
}

/**
 * @param {Platform} platform
 * @param {Record<string, string>} env
 */
async function exportApp(platform, env) {
	const buildDir = `build/${platform}`;
	const archive = `${buildDir}/SpellingBeePlus.xcarchive`;
	const exportPath = `${buildDir}/export`;
	const exportOptionsFile = `${buildDir}/exportOptions.plist`;
	const exportPlists = {
		iOS: dedent`
			<?xml version=\"1.0\" encoding=\"UTF-8\"?>
			<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">
			<plist version=\"1.0\">
				<dict>
					<key>method</key>
					<string>release-testing</string>

					<key>teamID</key>
					<string>${env.DEV_TEAM}</string>
				</dict>
			</plist>
		`,
		macOS: dedent`
			<?xml version=\"1.0\" encoding=\"UTF-8\"?>
			<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">
			<plist version=\"1.0\">
				<dict>
					<key>method</key>
					<string>app-store-connect</string>

					<key>testFlightInternalTestingOnly</key>
					<true/>

					<key>teamID</key>
					<string>${env.DEV_TEAM}</string>
				</dict>
			</plist>
		`,
	};

	writeFileSync(exportOptionsFile, exportPlists[platform]);

	print(`>>> Archiving ${platform}app...`);

	await spin(() =>
		run(
			"xcodebuild",
			[
				`DEV_TEAM=${env.DEV_TEAM}`,
				"-exportArchive",
				"-allowProvisioningUpdates",
				"-archivePath",
				archive,
				"-exportPath",
				exportPath,
				"-exportOptionsPlist",
				exportOptionsFile,
			],
			{ logFile: `${buildDir}/archive.log` },
		),
	);
}

/**
 * @param {Platform} platform
 * @param {Record<string, string>} env
 */
async function validateApp(platform, env) {
	const buildDir = `build/${platform}`;
	const artifact = `${buildDir}/export/SpellingBeePlus.${exportExts[platform]}`;

	const { output } = await run("op", ["read", env.DEV_PASSWORD]);
	const devPassword = output.trim();

	print(`>>> Validating ${platform} app...`);

	await spin(() =>
		run(
			"xcrun",
			[
				"altool",
				"--validate-app",
				"--file",
				artifact,
				"--username",
				env.DEV_USERNAME,
				"--password",
				devPassword,
				"--type",
				exportTypes[platform],
			],
			{ logFile: `${buildDir}/validate.log` },
		),
	);
}

/**
 * @param {Platform} platform
 * @param {Record<string, string>} env
 */
async function uploadApp(platform, env) {
	const buildDir = `build/${platform}`;
	const artifact = `${buildDir}/export/SpellingBeePlus.${exportExts[platform]}`;

	const { output } = await run("op", ["read", env.DEV_PASSWORD]);
	const devPassword = output.trim();

	print(`>>> Uploading ${platform} app...`);

	await spin(() =>
		run(
			"xcrun",
			[
				"altool",
				"--upload-app",
				"--file",
				artifact,
				"--username",
				env.DEV_USERNAME,
				"--password",
				devPassword,
				"--type",
				exportTypes[platform],
			],
			{ logFile: `${buildDir}/upload.log` },
		),
	);
}
