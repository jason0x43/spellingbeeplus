#!/usr/bin/env python

from sys import argv, exit
from pathlib import Path
import re

args = argv[1:]

if len(args) > 0 and args[0] in ['-h', '--help']:
  print("usage: version [major|minor|patch|build]")
  print("  major: increment the major version")
  print("  minor: increment the minor version")
  print("  patch: increment the patch version")
  print("  build: increment the build version")
  exit(0)

project_file = 'SpellingBeePlus.xcodeproj/project.pbxproj'
project_lines = Path(project_file).read_text().splitlines()

build: int | None = None
version: str | None = None

build_re = re.compile(r"(\s+)CURRENT_PROJECT_VERSION = (\d+);")
version_re = re.compile(r"(\s+)MARKETING_VERSION = (\d+.\d+.\d+);")

for line in project_lines:
  if build_match := build_re.match(line):
    if build is None:
      build = int(build_match.group(2))
  elif version_match := version_re.match(line):
    if version is None:
      version = version_match.group(2)
  if build is not None and version is not None:
    break

if build is None or version is None:
  print("Could not find version information in project file")
  exit(1)

new_build = build
new_version = version

if len(args) == 0:
  print(f"{version}({build})")
elif args[0] == "build":
  new_build += 1
elif args[0] == "patch":
  new_build += 1
  tmp_version = [int(v) for v in version.split('.')]
  tmp_version[2] += 1
  new_version = f"{tmp_version[0]}.{tmp_version[1]}.{tmp_version[2]}"
elif args[0] == "minor":
  new_build += 1
  tmp_version = [int(v) for v in version.split('.')]
  tmp_version[1] += 1
  tmp_version[2] = 0
  new_version = f"{tmp_version[0]}.{tmp_version[1]}.{tmp_version[2]}"
elif args[0] == "major":
  new_build += 1
  tmp_version = [int(v) for v in version.split('.')]
  tmp_version[0] += 1
  tmp_version[1] = 0
  tmp_version[2] = 0
  new_version = f"{tmp_version[0]}.{tmp_version[1]}.{tmp_version[2]}"

if new_build != build or new_version != version:
  if new_build != build:
    for index, line in enumerate(project_lines):
      if build_match := build_re.match(line):
        project_lines[index] = f"{build_match.group(1)}CURRENT_PROJECT_VERSION = {new_build};"

  if new_version != version:
    for index, line in enumerate(project_lines):
      if version_match := version_re.match(line):
        project_lines[index] = f"{version_match.group(1)}MARKETING_VERSION = {new_version};"

  Path(project_file).write_text(f"{'\n'.join(project_lines)}\n")
