#!/usr/bin/env bash

set -e

source env.xcconfig

declare -A export_plists

export_plists["iOS"]="<?xml version=\"1.0\" encoding=\"UTF-8\"?>
<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">
<plist version=\"1.0\">
  <dict>
    <key>method</key>
    <string>release-testing</string>

    <key>teamID</key>
    <string>$DEV_TEAM</string>
  </dict>
</plist>"

export_plists["macOS"]="<?xml version=\"1.0\" encoding=\"UTF-8\"?>
<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">
<plist version=\"1.0\">
  <dict>
    <key>method</key>
    <string>app-store-connect</string>

    <key>testFlightInternalTestingOnly</key>
    <true/>

    <key>teamID</key>
    <string>$DEV_TEAM</string>
  </dict>
</plist>"

declare -A export_exts

export_exts["iOS"]="ipa"
export_exts["macOS"]="pkg"

declare -A export_types

export_types["iOS"]="ios"
export_types["macOS"]="macos"

function spin {
  local pid=$1
  local spin='/-\|'
  local i=0

   # cursor invisible
  tput civis

  while kill -0 $pid 2>/dev/null; do
    local i=$(((i + 1) % ${#spin}))
    printf "%s" "${spin:$i:1}"
    printf "\b"
    sleep .1
  done

  tput cnorm

  printf " \n"

  wait $pid
  return $?
}

function validate_app {
  local platform=$1
  local build_dir=build/$platform
  local artifact=$build_dir/export/SpellingBeePlus.${export_exts[$platform]}

  echo -n ">>> Validating $platform app..."

  xcrun altool \
    --validate-app \
    --file "$artifact" \
    --username $DEV_USERNAME \
    --password $(op read "$DEV_PASSWORD") \
    --type ${export_types[$platform]} > $build_dir/validate.log 2>&1 &

  spin $!
}

function upload_app {
  local platform=$1
  local build_dir=build/$platform
  local artifact=$build_dir/export/SpellingBeePlus.${export_exts[$platform]}

  echo -n ">>> Uploading $platform app..."

  xcrun altool \
    --upload-app \
    --file "$artifact" \
    --username $DEV_USERNAME \
    --password $(op read "$DEV_PASSWORD") \
    --type ${export_types[$platform]} > $build_dir/upload.log 2>&1 &

  spin $!
}

function export_app {
  local platform=$1
  local build_dir=build/$platform
  local archive=$build_dir/SpellingBeePlus.xcarchive
  local export_path=$build_dir/export
  local export_options=$build_dir/exportOptions.plist
  echo "${export_plists[$platform]}" > $export_options

  echo -n ">>> Archiving $platform app..."

  xcodebuild \
    DEV_TEAM=$DEV_TEAM \
    -exportArchive \
    -allowProvisioningUpdates \
    -archivePath $archive \
    -exportPath $export_path \
    -exportOptionsPlist $export_options > $build_dir/archive.log 2>&1 &

  spin $!
}

function build_app {
  local platform=$1
  local build_dir=build/$platform

  mkdir -p $build_dir

  echo -n ">>> Building $platform app..."

  xcodebuild \
    DEV_TEAM=$DEV_TEAM \
    -scheme "SpellingBeePlus ($platform)" \
    -destination "generic/platform=$platform" \
    -archivePath "$build_dir/SpellingBeePlus.xcarchive" \
    archive > $build_dir/build.log &

  spin $!
}

if [[ -z $DEV_TEAM ]]; then
  echo "DEV_TEAM must be defined"
  exit 1
fi

do_build_ios=1
do_build_mac=1
do_publish=1
do_tag=1
do_check=1

while getopts "hp:c" options; do
  case "${options}" in
    p)
      platform=${OPTARG}
      case "${platform}" in
        mac)
          do_build_ios=0
          ;;
        ios)
          do_build_mac=0
          ;;
        *)
          echo "unknown platform $platform"
          exit 1
        ;;
      esac
      ;;
    c)
      do_publish=0
      do_tag=0
      ;;
    h)
      echo "usage: $0 [-p platform] [-c] [-h]"
      echo "  -p platform: build for platform (mac or ios)"
      echo "  -c: check (build and validate only)"
      echo "  -h: print this message"
      exit 0
      ;;
    *)
      echo "unknown option"
      exit 1
      ;;
  esac
done

if (( $do_check )); then
  git diff-index --quiet HEAD || (echo "Project has uncommitted changes" && exit 1)
fi

version="v$(./version | cut -f 1 -d"(")"
if [[ -n $(git tag -l $version) ]]; then
  echo "Version $version has already been tagged"
  exit 1
fi

echo ">>> Building $version"

echo ">>> Clearing build directory..."
rm -rf ./build

if (( $do_build_ios )); then
  build_app iOS
  export_app iOS
  if (( $do_publish )); then
    upload_app iOS
  else
    validate_app iOS
  fi
fi
if (( $do_build_mac )); then
  build_app macOS
  export_app macOS
  if (( $do_publish )); then
    upload_app macOS
  else
    validate_app macOS
  fi
fi

if (( $do_tag )); then
  echo ">>> Tagging version $version..."
  echo ""
  git tag $version HEAD
fi

echo ">>> Done."
